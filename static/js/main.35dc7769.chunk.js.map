{"version":3,"sources":["initialstate.js","Container.js","AddorRemoveAttributes/index.js","AppBar/index.js","Cards/Card.js","Cards/index.js","CompareProducts/index.js","App.js","serviceWorker.js","index.js"],"names":["data","attributes","id","name","check","ContainerBox","props","Fragment","CssBaseline","Container","fixed","Typography","component","style","backgroundColor","marginTop","marginBottom","children","useStyles","makeStyles","theme","box","display","flexDirection","title","fontWeight","formControl","margin","spacing","root","textfield","minWidth","Attributes","updateAttributes","open","handleClose","classes","React","useState","every","o","selectAll","setSelectAll","searchAttribute","setSearchAttribute","checkboxes","setCheckboxes","handleMultipleCheckbox","event","newAttributes","map","target","Dialog","onClose","aria-labelledby","aria-describedby","DialogTitle","className","DialogContent","DialogContentText","FormControl","FormGroup","FormControlLabel","control","TextField","value","onChange","label","type","variant","Checkbox","checked","v","color","checkboObj","trim","toLowerCase","includes","key","DialogActions","Button","onClick","autoFocus","flexGrow","menuButton","marginRight","AppBarComponent","setOpen","AppBar","position","Toolbar","AddorRemoveAttributes","card","maxWidth","minHeight","height","img","objectFit","hoverimg","opacity","content","paddingTop","price","right","CardBox","selectedData","setSelectedData","Card","CardActionArea","CardMedia","alt","image","find","CardContent","gutterBottom","description","group","flexWrap","justifyContent","Cards","obj","table","cell","fontSize","padding","textAlign","dot","width","marginLeft","borderRadius","button","border","textdDecoration","cursor","Result","products","length","TableContainer","Paper","Table","aria-label","TableHead","TableRow","TableCell","prod","index","align","TableBody","filter","attr","scope","Array","isArray","d","join","product_title","paddingLeft","product_title_min","App","matches","useMediaQuery","setAttributes","selectedProduct","setSelectedProduct","product","newList","push","CompareProducts","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.35dc7769.chunk.js","sourcesContent":["export const data = [{\r\n    \"id\": \"1\",\r\n    \"name\": \"Cherry\",\r\n    \"image\": \"cherry.png\",\r\n    \"price\": \"$1.99\",\r\n    \"colors\": [\"red\", \"green\", \"blue\"],\r\n    \"condition\": \"Fresh\",\r\n    \"description\": \"Two Cherries\",\r\n    \"vendors\": [\"Fresh Fruits Market\", \"Fruit Ninja\"]\r\n},\r\n{\r\n    \"id\": \"2\",\r\n    \"name\": \"Orange\",\r\n    \"image\": \"orange.png\",\r\n    \"price\": \"$2.99\",\r\n    \"colors\": [\"green\", \"blue\"],\r\n    \"condition\": \"Frozen\",\r\n    \"description\": \"Giant Orange\",\r\n    \"vendors\": [\"Families Market\"]\r\n},\r\n{\r\n    \"id\": \"3\",\r\n    \"name\": \"Nuts\",\r\n    \"image\": \"nuts.webp\",\r\n    \"price\": \"$1.00\",\r\n    \"colors\": [\"red\"],\r\n    \"condition\": \"Frozen\",\r\n    \"description\": \"Mixed Nuts\",\r\n    \"vendors\": [\"Amazon Distributor\"]\r\n},\r\n{\r\n    \"id\": \"4\",\r\n    \"name\": \"Strawberry\",\r\n    \"image\": \"strawberry.jfif\",\r\n    \"price\": \"$1.49\",\r\n    \"colors\": [\"blue\"],\r\n    \"condition\": \"Fresh\",\r\n    \"description\": \"Just Strawberry\",\r\n    \"vendors\": [\"Big Basket\"]\r\n}]\r\n\r\nexport const attributes = [\r\n    { id: 1, name: 'Price', check: true },\r\n    { id: 2, name: 'Colors', check: true },\r\n    { id: 3, name: 'Condition', check: true },\r\n    { id: 4, name: 'Vendors', check: true }\r\n]","import React from 'react';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\n\r\nconst ContainerBox = (props) => {\r\n    return (\r\n        <React.Fragment>\r\n            <CssBaseline />\r\n            <Container fixed>\r\n                <Typography component=\"div\" style={{ backgroundColor: '#cfe8fc', marginTop: '10px', marginBottom: '10px' }} >\r\n                    {props.children}\r\n                </Typography>\r\n            </Container >\r\n        </React.Fragment >\r\n    )\r\n}\r\n\r\nexport default ContainerBox;\r\n","import React from 'react';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    box: {\r\n        display: 'flex',\r\n        flexDirection: 'column'\r\n    },\r\n    title: {\r\n        fontWeight: 600\r\n    },\r\n    formControl: {\r\n        margin: theme.spacing(3),\r\n    },\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    textfield: {\r\n        minWidth: 350\r\n    }\r\n}));\r\n\r\nfunction Attributes({ attributes, updateAttributes, open, handleClose }) {\r\n\r\n    const classes = useStyles();\r\n\r\n    const [selectAll, setSelectAll] = React.useState(attributes.every(o => o.check === true));\r\n    const handleChangeAll = event => {\r\n        setSelectAll(!selectAll);\r\n        setCheckboxes(checkboxes.map(v => ({ ...v, check: !selectAll })))\r\n    };\r\n\r\n    const [searchAttribute, setSearchAttribute] = React.useState('');\r\n    const handleSearch = event => {\r\n        setSearchAttribute(event.target.value);\r\n    };\r\n\r\n    const [checkboxes, setCheckboxes] = React.useState(attributes);\r\n    const handleMultipleCheckbox = event => {\r\n        const newAttributes = checkboxes.map(o => {\r\n            return {\r\n                ...o,\r\n                check: o.name === event.target.name ? !o.check : o.check\r\n            }\r\n        })\r\n        setCheckboxes(newAttributes)\r\n        setSelectAll(newAttributes.every(o => o.check === true))\r\n    }\r\n\r\n    const handleApply = () => {\r\n        updateAttributes(checkboxes);\r\n        setSearchAttribute('')\r\n        handleClose();\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Dialog\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\">\r\n                <DialogTitle id=\"alert-dialog-title\">\r\n                    <span className={classes.title}>{\"Add/Remove Attributes\"}</span>\r\n                </DialogTitle>\r\n                <DialogContent component=\"div\">\r\n                    <DialogContentText component=\"div\" id=\"alert-dialog-description\">\r\n                        <div className={classes.box}>\r\n                            <FormControl component=\"fieldset\" className={classes.formControl}>\r\n                                <FormGroup>\r\n                                    <FormControlLabel\r\n                                        control={<TextField id=\"outlined-search\"\r\n                                            className={classes.textfield}\r\n                                            value={searchAttribute} onChange={handleSearch} label=\"Search Attributes\" type=\"search\" variant=\"outlined\" />} />\r\n                                </FormGroup>\r\n                                <FormGroup>\r\n                                    <FormControlLabel\r\n                                        control={<Checkbox checked={selectAll} onChange={handleChangeAll} value={selectAll} color=\"primary\" />}\r\n                                        label=\"Select All\" />\r\n                                </FormGroup>\r\n                                <hr />\r\n                                {\r\n                                    checkboxes.map(checkboObj => {\r\n                                        let show = !searchAttribute.trim() ? true : (searchAttribute && checkboObj.name.toLowerCase().includes(searchAttribute.toLowerCase().trim()))\r\n                                        return show ? (<FormGroup key={checkboObj.id} >\r\n                                            <FormControlLabel\r\n                                                control={<Checkbox checked={checkboObj.check} onChange={handleMultipleCheckbox} value={checkboObj.check} name={checkboObj.name} color=\"primary\" />}\r\n                                                label={checkboObj.name} />\r\n                                        </FormGroup>) : null\r\n                                    })\r\n                                }\r\n                            </FormControl>\r\n                        </div>\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose} variant=\"contained\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={handleApply} variant=\"contained\" color=\"primary\" autoFocus>\r\n                        Apply\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </React.Fragment >\r\n    )\r\n}\r\n\r\nexport default Attributes;","import React from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Button from '@material-ui/core/Button';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport AddorRemoveAttributes from '../AddorRemoveAttributes';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    }\r\n}));\r\n\r\nfunction AppBarComponent({ attributes, updateAttributes }) {\r\n\r\n    const classes = useStyles();\r\n\r\n    const [open, setOpen] = React.useState(false);\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <Typography variant=\"h6\" className={classes.title}></Typography>\r\n                    <Button variant=\"outlined\" color=\"inherit\" onClick={handleClickOpen}>\r\n                        <EditIcon /> &nbsp;&nbsp; Add/Remove Attributes\r\n                    </Button>\r\n\r\n                    <AddorRemoveAttributes\r\n                        attributes={attributes}\r\n                        updateAttributes={updateAttributes}\r\n                        open={open}\r\n                        handleClose={handleClose} />\r\n\r\n                </Toolbar>\r\n            </AppBar>\r\n            <CssBaseline />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AppBarComponent;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles({\r\n    card: {\r\n        minWidth: 200,\r\n        maxWidth: 250,\r\n        margin: 20,\r\n        minHeight: 300\r\n    },\r\n    root: {\r\n        height: '45%'\r\n    },\r\n    img: {\r\n        objectFit: 'scale-down',\r\n        height: 140,\r\n    },\r\n    hoverimg: {\r\n        objectFit: 'scale-down',\r\n        opacity: 0.4\r\n    },\r\n    content: {\r\n        paddingTop: 30\r\n    },\r\n    price: {\r\n        display: 'inline',\r\n        position: 'absolute',\r\n        right: 4\r\n    }\r\n});\r\n\r\nfunction CardBox({ data, selectedData, setSelectedData }) {\r\n    const classes = useStyles();\r\n    const updateProductList = (prod) => {\r\n        setSelectedData(prod)\r\n    }\r\n    return (\r\n        <Card className={classes.card}>\r\n            <CardActionArea>\r\n                <div className=\"userbox\">\r\n                    <CardMedia\r\n                        className={classes.img}\r\n                        component=\"img\"\r\n                        alt={data.name}\r\n                        image={data.image}\r\n                    />\r\n                    <div className=\"spanHover\" onClick={() => updateProductList(data)}>\r\n                        {selectedData.find(v => v.id === data.id) ? 'Remove' : 'Compare'}\r\n                    </div>\r\n                </div>\r\n                <CardContent className={classes.content}>\r\n                    <Typography gutterBottom variant=\"h5\" component=\"h3\">\r\n                        {data.name}\r\n                        <Typography gutterBottom className={classes.price} variant=\"h5\" component=\"p\">\r\n                            {data.price}\r\n                        </Typography>\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                        {data.description}\r\n                    </Typography>\r\n                </CardContent>\r\n            </CardActionArea>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default CardBox;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from './Card';\r\n\r\nconst useStyles = makeStyles({\r\n    group: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        flexWrap: 'wrap',\r\n        justifyContent: 'center'\r\n    }\r\n});\r\n\r\nfunction Cards({ data, selectedData, setSelectedData }) {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.group}>\r\n            {data.map(obj => (<Card\r\n                key={obj.id}\r\n                data={obj}\r\n                selectedData={selectedData}\r\n                setSelectedData={setSelectedData} />))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nconst useStyles = makeStyles({\r\n    table: {\r\n        maxWidth: 600,\r\n    },\r\n    cell: {\r\n        fontSize: 14,\r\n        fontWeight: \"bold\",\r\n        padding: 10,\r\n        textAlign: 'inherit'\r\n    },\r\n    root: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        minHeight: 400,\r\n        maxWidth: '98%',\r\n        margin: 10\r\n    },\r\n    dot: {\r\n        height: 10,\r\n        width: 10,\r\n        marginLeft: 2,\r\n        marginRight: 2,\r\n        borderRadius: '50%',\r\n        display: 'inline-block'\r\n    },\r\n    button: {\r\n        backgroundColor: '#4CAF50',\r\n        border: 'none',\r\n        color: 'white',\r\n        padding: '10px 20px',\r\n        textAlign: 'center',\r\n        textdDecoration: 'none',\r\n        display: 'inline-block',\r\n        fontSize: 15,\r\n        margin: '4px 2px',\r\n        cursor: 'cursor'\r\n    }\r\n});\r\n\r\nfunction Result({ attributes, products }) {\r\n    const classes = useStyles();\r\n    if (!products.length || attributes.every(o => o.check === false)) { return null }\r\n    return (\r\n        <TableContainer component={Paper} className={classes.root}>\r\n            <Table className={classes.table} aria-label=\"simple table\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell></TableCell>\r\n                        {\r\n                            products.map((prod, index) => (<TableCell key={index} className={classes.cell} align=\"right\">{prod.name}</TableCell>))\r\n                        }\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {\r\n                        attributes.filter(v => v.check).map((attr, index) => {\r\n                            return (\r\n                                <TableRow key={attr.id}>\r\n                                    <TableCell component=\"th\" scope=\"row\">\r\n                                        {attr.name}\r\n                                    </TableCell>\r\n                                    {\r\n                                        products.map((prod, index) => {\r\n                                            let data = prod[attr.name.toLowerCase()];\r\n                                            if (attr.name.toLowerCase() === \"condition\") {\r\n                                                data = (<button\r\n                                                    className={classes.button}\r\n                                                    style={{ opacity: data.toLowerCase() === \"frozen\" ? 1 : 0.5 }}                                                >\r\n                                                    {data}\r\n                                                </button>)\r\n                                            }\r\n                                            if (Array.isArray(data)) {\r\n                                                if (attr.name.toLowerCase() === \"colors\") {\r\n                                                    data = data.map((d, index) => (<span key={index} style={{ backgroundColor: d }} className={classes.dot} />))\r\n                                                } else {\r\n                                                    data = data.join(', ')\r\n                                                }\r\n                                            }\r\n                                            return (\r\n                                                <React.Fragment key={index}>\r\n                                                    <TableCell component=\"th\" scope=\"row\">\r\n                                                        {data}\r\n                                                    </TableCell>\r\n                                                </React.Fragment>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                </TableRow>\r\n                            )\r\n                        })\r\n                    }\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n}\r\nexport default Result;","import React, { useState } from 'react';\nimport './App.css';\nimport { data, attributes } from './initialstate';\nimport Container from './Container';\nimport AppBar from './AppBar';\nimport Cards from './Cards';\nimport CompareProducts from './CompareProducts';\nimport { makeStyles } from '@material-ui/core/styles';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\n\nconst useStyles = makeStyles(theme => ({\n  product_title: {\n    fontSize: 'x-large',\n    paddingTop: '2%',\n    paddingLeft: '3%'\n  },\n  product_title_min: {\n    fontSize: 'x-large',\n    paddingTop: '2%',\n    paddingLeft: '30%'\n  }\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const matches = useMediaQuery('(max-width:900px)');\n\n  const [attr, setAttributes] = useState(attributes);\n  const updateAttributes = (attr) => {\n    setAttributes(attr);\n  }\n\n  const [selectedProduct, setSelectedProduct] = useState([]);\n  const updateSelectedProduct = (product) => {\n    if (!selectedProduct.find(v => v.id === product.id)) {\n      selectedProduct.push(product)\n      let newList = [...selectedProduct]\n      setSelectedProduct(newList)\n    } else {\n      let newList = selectedProduct.filter(v => v.id !== product.id)\n      setSelectedProduct(newList)\n    }\n  }\n\n  return (\n    <React.Fragment>\n      <AppBar\n        attributes={attr}\n        updateAttributes={updateAttributes} />\n      <Container>\n        <div className={matches ? classes.product_title_min : classes.product_title}>\n          Compare Products\n        </div>\n        <Cards\n          data={data}\n          selectedData={selectedProduct}\n          setSelectedData={updateSelectedProduct} />\n      </Container >\n      <CompareProducts\n        attributes={attr}\n        products={selectedProduct} />\n    </React.Fragment >\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}